--TODO finish this. It needs to use a protean and be integer values only Zero or less  means it's empty

--[[*
	@moduleid pool
	@authors Centauri Soldier
	@copyright Copyright Â© 2020 Centauri Soldier
	@description <h2>pool</h2><h3>Utility class used to keep track of things like Health, Magic, etc.</h3><p>You can operate on <strong>pool</strong> objects using some math operators.</p>
	<ul>
		<li><p><b>+</b>: adds a number to the pool's CURRENT value or, if adding another pool object instead of a number, it will add the other pool's CURRENT value to it's own <em>(up to it's MAX)</em> value.</p></li>
		<li><p><b>-</b>: does the same as addition but for subtraction. Will not go below the pool's MIN value.</p></li>
		<li><p><b>%</b>: will modify a pool's MAX value using a number value or another pool object <em>(uses it's MAX value)</em>. Will not allow itself to be set at or below the MIN value.</p></li>
		<li><p><b>*</b>: operates as expected on the object's CURRENT value.</p></li>
		<li><p><b>/</b>: operates as expected on the object's CURRENT value. All div is floored.</p></li>
		<li><p><b>-</b><em>(unary minus)</em>: will set the object's CURRENT value to the value of MIN.</p></li>
		<li><p><b>#</b>: will set the object's CURRENT value to the value of MAX.</p></li>
		<li><p><b></b></p></li>
		<li><p><b></b></p></li>
	</ul>
	@version 0.2
	@todo Complete the binary operator metamethods.
	*]]

	--[[!
	@module pool
	@func __construct
	@scope local
	@desc The constructor for the pool class.
!]]
enum("PoolValue", 		{"Min", "Max", "Current", "Regen"});
enum("PoolCallback", 	{"OnAdd", "OnAll", "OnDiv", "OnMax", "OnMin", "OnMod", "OnMul", "OnSet", "OnSub", "OnReg", "OnZero"});

local PoolValue 		= PoolValue;
local PoolCallback 		= PoolCallback;
local leftOnlyObject 	= leftOnlyObject;
local rightOnlyObject	= rightOnlyObject;
local bothObjects		= bothObjects;
local type				= type;

local tPools = {};

--[[local function callback(sEvent, oPool)

	if (type(oPool.callbacks[sEvent]) == 'function') then
		oPool.callbacks[sEvent](oPool);
	end

end]]

--for direct values
local function valueIsValid(vValue)
	return
end

local function check(this, eEvent)
	local tFields 		= tPools[this];
	local tValues 		= tFields.values;
	local tCallbacks 	= tFields.callbacks;
	local eCurrent  	= PoolValue.Current;
	local eMin			= PoolValue.Min;
	local eMax			= PoolValue.Max;
	local eOnAll		= PoolCallback.OnAll;

	--error(oPool.values[eMax])
	if (tValues[eCurrent] > tValues[eMax]) then
		tValues[eCurrent] = tValues[eMax];

	elseif (tValues[eCurrent] < tValues[eMin]) then --NOW ALLOWING ZERO VALUES
		tValues[eCurrent] = tValues[eMin];
	end

	if (tValues[eMax] <= tValues[eMin]) then
		tValues[eMax] = tValues[eMin] + 1;
	end

	--execute the callback if it exists
	if (type(oPool.callbacks[eOnAll]) == 'function') then
		oPool.callbacks[eOnAll](oPool);
	elseif (type(oPool.callbacks[eEvent]) == 'function') then
		oPool.callbacks[eEvent](oPool);
	end

end

function setValue(this, eValue, nValue, eEvent)
	tPools[this].values[eValue] = nValue;
	check(this, eEvent);
end

local pool = class "pool" {

	__construct = function(this, shared, nMin, nMax, nCurrent, nRegen)
		tPools[this] 	= shared;
		local tFields 	= shared;

		tFields.callbacks 	= {};
		tFields.values 		= {};

		--setup the callbacks
		for _, eEvent in PoolCallback() do
			tPools[this].callbacks[eEvent] = null;
		end

		--initialize the values
		local tValues = tFields.values;

		tValues[PoolValue.Min] 		= type(nMin) 		== "number"	and nMin 		or 1;
		tValues[PoolValue.Max] 		= type(nMax) 		== "number"	and nMax 		or 2;
		tValues[PoolValue.Current] 	= type(nCurrent) 	== "number" and nCurrent 	or 1;
		tValues[PoolValue.Regen] 	= type(nRegen) 		== "number" and nRegen 		or 0;

	end,


	--[[!
	@module pool
	@func __add
	@scope local
	@desc NOT DONE YET!
	!]]
	__add = function(vLeft, vRight)
		local sLeftType 	= type(vLeft);
		local sRightType 	= type(vRight);
		local sPool 		= "pool";
		local eCurrent  	= PoolValue.Current;
		local eOnAdd		= PoolCallback.OnAdd;
		local oRet 			= nil;

		if (leftOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, tPools[vLeft].values[eCurrent] + vRight, eOnAdd);

		elseif (rightOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vRight;
			setValue(vRight, eCurrent, tPools[vRight].values[eCurrent] + vLeft, PeOnAdd);

		elseif (bothObjects(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, tPools[vLeft].values[eCurrent] + tPools[vRight].values[eCurrent], eOnAdd);

		end

		return oRet;
	end,


	__div = function(vLeft, vRight)
		local sLeftType 	= type(vLeft);
		local sRightType 	= type(vRight);
		local sPool 		= "pool";
		local eCurrent		= PoolValue.Current;
		local eOnDiv		= PoolCallback.OnDiv;
		local oRet 			= nil;

		if (leftOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, math.floor(tPools[vLeft].values[eCurrent] / vRight), eOnDiv);

		elseif (rightOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vRight;
			setValue(vRight, eCurrent, math.floor(tPools[vRight].values[eCurrent] / vLeft), eOnDiv);

		elseif (bothObjects(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, math.floor(tPools[vLeft].values[eCurrent] / tPools[vRight].values[eCurrent]), eOnDiv);

		end

		return oRet;
	end,

	__len = function(this)
		setValue(this, PoolValue.Current, tPools[this].values[PoolValue.Max], PoolCallback.OnMax);
		return this;
	end,


	--[[!
	@module pool
	@func __mod
	@scope local
	@desc <p>Sets the pool object's MIN or MAX value depending on order.</p>
	<ul>
		<li><p>If the pool object is on the left and a number on the right, sets the object's MAX value to the indicated value.</p></li>
		<li><p>If the object is on the right and a number on the left, sets the MIN value to indicated number.</p></li>
		<li><p>If both sides are pool objects, it sets the MIN and MAX values of the left side object to the MIN and MAX values of that of the right object.</p></li>
	</ul>
	<p>Note: if the M
	AX is ever set below or equal to the MIN value, it will be automatically altered to be one higher than the MIN value.</p>
	!]]
	__mod = function(vLeft, vRight)
		local sLeftType 	= type(vLeft);
		local sRightType 	= type(vRight);
		local sPool 		= "pool";
		local eMin 			= PoolValue.Min;
		local eMax 			= PoolValue.Max;
		local eOnMod		= PoolCallback.OnMod;
		local oRet 			= nil;

		if (leftOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eMax, vRight, eOnModD);

		elseif (rightOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vRight;
			setValue(vRight, eMin, vLeft, eOnMod);

		elseif (bothObjects(sLeftType, sRightType, sPool)) then
			setValue(vLeft, eMin, tPools[vRight].values[eMin], eOnMod);
			setValue(vLeft, eMax, tPools[vRight].values[eMax], eOnMod);

		end

		return oRet;
	end,


	__mul = function(vLeft, vRight)
		local sLeftType 	= type(vLeft);
		local sRightType 	= type(vRight);
		local sPool 		= "pool";
		local eCurrent		= PoolValue.Current;
		local eOnMul 		= PoolCallback.OnMul;
		local oRet 			= nil;

		if (leftOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, tPools[vLeft].values[eCurrent] * vRight, eOnMul);

		elseif (rightOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vRight;
			setValue(vRight, eCurrent, tPools[vRight].values[eCurrent] * vLeft, eOnMul);

		elseif (bothObjects(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, tPools[vLeft].values[eCurrent] * tPools[vRight].values[eCurrent], eOnMul);

		end

		return oRet;
	end,


	__sub = function(vLeft, vRight)
		local sLeftType 	= type(vLeft);
		local sRightType	= type(vRight);
		local sPool 		= "pool";
		local eCurrent 		= PoolValue.Current;
		local eOnSub 		= PoolCallback.OnSub;
		local oRet 			= nil;

		if (leftOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, tPools[vLeft].values[eCurrent] - vRight, eOnSub);

		elseif (rightOnlyObject(sLeftType, sRightType, sPool)) then
			oRet = vRight;
			setValue(vRight, eCurrent, tPools[vRight].values[eCurrent] - vLeft, eOnSub);

		elseif (bothObjects(sLeftType, sRightType, sPool)) then
			oRet = vLeft;
			setValue(vLeft, eCurrent, tPools[vLeft].values[eCurrent] - tPools[vRight].values[eCurrent], eOnSub);

		end

		return oRet;
	end,


	__tostring = function(this)
	local tFields 	= tPools[this];
		local sRet 		= "";

		for _, eValue in PoolValue() do
			sRet = sRet..eValue.name..': '..tFields.values[eValue]..' ';
		end

		return sRet;
	end,


	__unm = function(this)
		local tFields 	= tPools[this];
		setValue(this, PoolValue.Current, tFields.values[PoolValue.Min], PoolCallback.OnMin);
		return this;
	end,


	get = function(this, eValue)
		local nRet 		= nil;
		local tFields 	= tPools[this];
		local tValues 	= tFields.values;

		if (type(tValues[eValue]) ~= "nil") then
			nRet = math.floor(tValues[eValue]);--always returns an integer value
		end

		--return nRet or math.huge;
		return nRet;
	end,


	copy = function(this)
		local tFields 	= tPools[this];
		local tValues 	= tFields.values
		local oRet 		= pool(tValues.Min, tValues.Max, tValues.Current, tValues.Regen);

		for nID, eValue in PoolValue() do
			setValue(oRet, eValue, tValues[eValue]);
		end

		return oRet;
	end,

	set = function(this, eValue, nValue)
		local tFields = tPools[this];

		if ((type(nValue) == "number") and type(tFields.values[eValue]) ~= "nil") then
			setValue(this, eValue, nValue, PoolCallback.OnSet);
		end

		return this;
	end,

	regen = function(this)

	end,

	setCallback = function(this, eEvent, fCallback)
		if (eEvent and fCallback and type(eEvent) == 'PoolCallback' and type(fCallback) == 'function') then
			tPools[this].callbacks[eEvent] = fCallback;
		end

		return this;
	end,
};

return pool;
